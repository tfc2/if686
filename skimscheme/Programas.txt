“Além do interpretador, a equipe deve construir pelo menos dez
programas corretos e que testem todas as funcionalidades implementadas
pelo interpretador. Esses testes devem incluir situações onde várias
funcionalidades são combinadas. Os programas desenvolvidos devem estar
disponíveis no momento da apresentação do projeto.
Pelo menos um desses programas deve implementar o algoritmo Quicksort
recursivamente e pelo menos dois devem usar clausuras léxicas”

1. Fibonacci

1.1 Estrutura:

(begin
    (define n 0)
    (comment funcao fibonacci com variaveis locais e globais)
    (define fib
        (lambda (n)
            (if ( eqv? n 0) 0
            (if ( eqv? n 1) 1
            (+ (fib (- n 1)) (fib (- n 2)))))))
    (fib 4)
)

1.2 Teste:

runhaskell SSInterpreter.hs "(begin (define n 0) (comment funcao fibonacci com variaveis locais e globais) (define fib (lambda (n) (if (eqv? n 0) 0 (if (eqv? n 1) 1 (+ (fib (- n 1)) (fib (- n 2))))))) (fib 4) )"

1.3 Saída:

3
[("fib",lambda ((n) (if (eqv? n 0) 0 (if (eqv? n 1) 1 (+ (fib (- n 1)) (fib (- n
 2))))))),("n",0)]



2. Divisível por 6

2.1 Estrutura:

(begin
    (let ((a 1))
        (define divisivel2
            (make-closure
                (lambda (x)
                    (begin (set! a (mod x 2)))
                )
            )
        )
    )
    (let ((b 1))
        (define divisivel3
            (make-closure
                (lambda (y)
                    (begin (set! b (mod y 3)))
                )
            )
        )
    )
    (define divisivel6
        (lambda (z)
            (if ( eqv? (divisivel2 z) 0 )
                (if ( eqv? (divisivel3 z) 0 ) #t #f )
            #f)
         )
    )
    (comment caso teste)
    (divisivel6 24)
)

2.2 Teste:

runhaskell SSInterpreter.hs "(begin (let ((a 1)) (define divisivel2 (make-closure (lambda (x) (begin (set! a (mod x 2))) ) ) ) ) (let ((b 1)) (define divisivel3 (make-closure (lambda (y) (begin (set! b (mod y 3))) ) ) ) ) (define divisivel6 (lambda (z) (if ( eqv? (divisivel2 z) 0 ) (if ( eqv? (divisivel3 z) 0 ) #t #f ) #f) ) ) (comment caso teste) (divisivel6 24) )"

2.3 Saída:

#t
[("*",<native procedure>),("+",<native procedure>),("-",<native procedure>),("/"
,<native procedure>),("append",<native procedure>),("boolean?",<native procedure
>),("car",<native procedure>),("cdr",<native procedure>),("cons",<native procedu
re>),("divisivel2",lambda ((x) (begin (set! a (mod x 2)))) environment: fromList
 [("*",<native procedure>),("+",<native procedure>),("-",<native procedure>),("/
",<native procedure>),("a",1),("append",<native procedure>),("boolean?",<native
procedure>),("car",<native procedure>),("cdr",<native procedure>),("cons",<nativ
e procedure>),("eqv?",<native procedure>),("list?",<native procedure>),("lt?",<n
ative procedure>),("mod",<native procedure>),("number?",<native procedure>)]),("
divisivel3",lambda ((y) (begin (set! b (mod y 3)))) environment: fromList [("*",
<native procedure>),("+",<native procedure>),("-",<native procedure>),("/",<nati
ve procedure>),("append",<native procedure>),("b",0),("boolean?",<native procedu
re>),("car",<native procedure>),("cdr",<native procedure>),("cons",<native proce
dure>),("divisivel2",lambda ((x) (begin (set! a (mod x 2)))) environment: fromLi
st [("*",<native procedure>),("+",<native procedure>),("-",<native procedure>),(
"/",<native procedure>),("a",1),("append",<native procedure>),("boolean?",<nativ
e procedure>),("car",<native procedure>),("cdr",<native procedure>),("cons",<nat
ive procedure>),("eqv?",<native procedure>),("list?",<native procedure>),("lt?",
<native procedure>),("mod",<native procedure>),("number?",<native procedure>)]),
("eqv?",<native procedure>),("list?",<native procedure>),("lt?",<native procedur
e>),("mod",<native procedure>),("number?",<native procedure>)]),("divisivel6",la
mbda ((z) (if (eqv? (divisivel2 z) 0) (if (eqv? (divisivel3 z) 0) #t #f) #f))),(
"eqv?",<native procedure>),("list?",<native procedure>),("lt?",<native procedure
>),("mod",<native procedure>),("number?",<native procedure>),("z",24)]
 
 Obs.: substituindo 24 por 23, por exemplo, a saída retorna #f.



3. Inclui número maior que 5 em uma lista

3.1 Estrutura:

(begin
    (define maior5
        (lambda (n)
            (if (lt? 5 n) (cons n '(7 8 9 10)) '(7 8 9 10) )
        )
    )
    (maior5 6)
)

3.2 Teste:

runhaskell SSInterpreter.hs "(begin (define maior5 (lambda (n) (if (lt? 5 n) (cons n '(7 8 9 10)) '(7 8 9 10) ) ) ) (maior5 6) )"

3.3 Saída:
(6 7 8 9 10)
[("maior5",lambda ((n) (if (lt? 5 n) (cons n (quote (7 8 9 10))) (quote (7 8 9 10)))))]

Obs.: substituindo 6 por 3, por exemplo, a saída retorna a lista antiga sem incluir o número 3.



4. Divide por dois

4.1 Estrutura:

(begin
    (define x 00)
    (comment divisao por dois alterando variavel global)
    (define f
        (lambda (x)
            (set! x (/ x 2))
        )
    )
    (comment a funcao abaixo deve retornar 4 e nao 5)
    (f 8)
)

4.2 Teste:

runhaskell SSInterpreter.hs "(begin (define x 0) (comment divisao por dois alterando variavel global) (define f (lambda (x) (set! x (/ x 2)))) (comment a funcao abaixo deve retornar 4 e nao 5) (f 8))"

4.3 Saída:

4
[("f",lambda ((x) (set! x (/ x 2)))),("x",4)]



5. Quicksort

5.1 Estrutura:

(begin
	(define partition
		(lambda (compare l1)
			(if (eqv? l1 '())
				'()
			(if (compare (car l1))
					(cons (car l1) (partition compare (cdr l1)))
					(partition compare (cdr l1))
			)))
		)	
	(define quicksort
		(lambda (l1)
			(if (eqv? l1 '())
				'()
				(let 
					((pivot (car l1)))
					(append 
						(append 
							(quicksort (partition (lambda (x) (lt? x pivot)) l1))
							(partition (lambda (x) ( eqv? x pivot)) l1)
						)
						(quicksort (partition (lambda (x) (lt? pivot x)) l1))
					)
				)
			)
		)
	)
	
	(quicksort '(9 8 7 6 5 4 3 2 1))

)


5.2 Teste:

runhaskell SSInterpreter.hs "(begin (define partition (lambda (compare l1) (if (eqv? l1 '()) '() (if (compare (car l1)) (cons (car l1) (partition compare (cdr l1))) (partition compare (cdr l1)))))) (define quicksort (lambda (l1) (if (eqv? l1 '()) '() (let ((pivot (car l1))) (append (append (quicksort (partition (lambda (x) (lt? x pivot)) l1)) (partition (lambda (x) ( eqv? x pivot)) l1)) (quicksort (partition (lambda (x) (lt? pivot x)) l1))))))) (quicksort '(15 2 5 11 4 1 12 14 9 8 13 3 6 7 10)))"

5.3 Saída:

(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
[("partition",lambda ((compare l1) (if (eqv? l1 (quote ())) (quote ()) (if (comp
are (car l1)) (cons (car l1) (partition compare (cdr l1))) (partition compare (c
dr l1)))))),("quicksort",lambda ((l1) (if (eqv? l1 (quote ())) (quote ()) (let (
(pivot (car l1))) (append (append (quicksort (partition lambda ((x) (lt? x pivot
)) l1)) (partition lambda ((x) (eqv? x pivot)) l1)) (quicksort (partition lambda
 ((x) (lt? pivot x)) l1)))))))]
 
 
 
6. MDC

6.1 Estrutura:

(begin
	(define mdc
		(lambda (a b)
			(if (eqv? a 0)
				b
				(if (eqv? b 0)
					a
					(if (lt? b a) 
						(mdc (- a b) b)
						(mdc a (- b a))
					)
				)
			)
		)
	)
		(mdc 18 24)
)

6.2 Teste:

runhaskell SSInterpreter.hs "(begin (define mdc (lambda (a b) (if (eqv? a 0) b (if (eqv? b 0) a (if (lt? b a) (mdc (- a b) b) (mdc a (- b a)) ))))) (mdc 18 24))"

6.3 Saída:

6
[("mdc",lambda ((a b) (if (eqv? a 0) b (if (eqv? b 0) a (if (lt? b a) (mdc (- a b) b) (mdc a (- b a)))))))]



7. Potência

7.1 Estrutura:

(begin
	(define pow
		(lambda (a b)
			(if (eqv? b 0)
				1
				(if (eqv? b 1)
					a
					(* a (pow a (- b 1)))
				)
			)
		)
	)
	(pow 2 5)
)

7.2 Teste:

runhaskell SSInterpreter.hs "(begin (define pow (lambda (a b) (if (eqv? b 0) 1 (if (eqv? b 1) a (* a (pow a (- b 1))) ) ) ) ) (pow 2 5) )"

7.3 Saída:

32
[("pow",lambda ((a b) (if (eqv? b 0) 1 (if (eqv? b 1) a (* a (pow a (- b 1)))))))]



8. Fatorial

8.1 Estrutura:

(begin
    (comment funcao fatorial)
	(define fat
		(lambda (n)
			(if (eqv? n 0) 1
				(* n (fat (- n 1)))
			)
		)
	)
	(fat 4)
)

8.2 Teste:

runhaskell SSInterpreter.hs "(begin (comment funcao fatorial) (define fat (lambda (n) (if (eqv? n 0) 1 (* n (fat (- n 1))) ) ) ) (fat 4) )"

8.3 Saída:

24
[("fat",lambda ((n) (if (eqv? n 0) 1 (* n (fat (- n 1))))))]



9. Divisão sucessiva de porcentagem

9.1 Estrutura:

(begin
  (let ((i 100))
    (define divisaoSucessiva 
      (make-closure 
        (lambda (y)
           (begin (set! i (/ i y)) i) 
      	 )
      )
    )
   )
  (define a (divisaoSucessiva 2))
  (define b (divisaoSucessiva 5))
  (comment quanto sobra se tirar o valor b de a)
  (- a b)  
)

9.2 Teste:

runhaskell SSInterpreter.hs "(begin (let ((i 100)) (define divisaoSucessiva (make-closure (lambda (y ) (begin (set! i (/ i y)) i) ) ) ) ) (define a (divisaoSucessiva 2)) (define b (divisaoSucessiva 5)) (comment quanto sobra se tirar o valor b de a) (- a b) )"

9.3 Saída:

40
[("*",<native procedure>),("+",<native procedure>),("-",<native procedure>),("/"
,<native procedure>),("a",50),("append",<native procedure>),("b",10),("boolean?"
,<native procedure>),("car",<native procedure>),("cdr",<native procedure>),("con
s",<native procedure>),("divisaoSucessiva",lambda ((y) (begin (set! i (/ i y)) i
)) environment: fromList [("*",<native procedure>),("+",<native procedure>),("-"
,<native procedure>),("/",<native procedure>),("append",<native procedure>),("bo
olean?",<native procedure>),("car",<native procedure>),("cdr",<native procedure>
),("cons",<native procedure>),("eqv?",<native procedure>),("i",10),("list?",<nat
ive procedure>),("lt?",<native procedure>),("mod",<native procedure>),("number?"
,<native procedure>)]),("eqv?",<native procedure>),("list?",<native procedure>),
("lt?",<native procedure>),("mod",<native procedure>),("number?",<native procedu
re>)]



10. Primo

10.1 Estrutura:

(begin
	(define cont 2)
    (define primo
        (lambda (n)
        	(if (lt? n (* cont cont)) #t 
        	(if (eqv? (mod n cont) 0) #f (begin (set! cont (+ cont 1)) (primo n) ))
            )))
    (primo 17)
)

10.2 Teste:

runhaskell SSInterpreter.hs "(begin (define cont 2) (define primo (lambda (n) (if (lt? n (* cont cont)) #t (if (eqv? (mod n cont) 0) #f (begin (set! cont (+ cont 1)) (primo n) ))))) (primo 17))"

10.3 Saída:

#t
[("cont",5),("primo",lambda ((n) (if (lt? n (* cont cont)) #t (if (eqv? (mod n c
ont) 0) #f (begin (set! cont (+ cont 1)) (primo n))))))]
